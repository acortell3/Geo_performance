#######################        DISPLACEMENT      ###############################
################################################################################
## Change response and censoring
## Censoring threshold
censoring_threshold <- 29.5
## Censore everything above censoring threshold
censored_resp <- Data$Displacement_at_max_force[-9] ## Without outlier
censored_resp[censored_resp > censoring_threshold] <- NA
## Create censor vector
censored <- as.numeric(is.na(censored_resp))
## New response
data$y <- censored_resp
censoring_threshold_v <- censored_resp
censoring_threshold_v <- ifelse(is.na(censoring_threshold_v), censoring_threshold, Inf)
## Constants
constants <- list(N = nrow(df),
n_Throw = n_Throw,
censoring_threshold = censoring_threshold_v)
## Define model
lm_displ_sh <- nimbleCode({
# likelihood
for (i in 1:N){
censored[i] ~ dinterval(y[i], censoring_threshold[i])
y[i] ~ dgamma(shape=mu[i]*sigma, scale=1/sigma)
log(mu[i]) <- beta0 + beta1*Inclination[i] + beta2*Distance[i] +
beta3*Morph1[i] + beta4*Morph2[i] + beta5*Max_width[i] + beta6*Shaft[i] +
random[Throw[i]]
}
# Random effect
for (j in 1:n_Throw){
random[j] ~ dnorm(0,sigma_u)
}
# Priors
beta0 ~ dnorm(0,100) # Intercept
beta1 ~ dnorm(0,100)
beta2 ~ dnorm(0,100)
beta3 ~ dnorm(0,100)
beta4 ~ dnorm(0,100)
beta5 ~ dnorm(0,100)
beta6 ~ dnorm(0,100)
sigma_u ~ T(dt(0,2,df=1),0,Inf)
sigma ~ T(dt(0,2,df=1),0,Inf) # Is the dispersion parameter (disp)
})
inits_sh <- list(beta1 = 0, beta2 = 0, beta3 = 0, beta4 = 0, beta5 = 0, beta6 = 0,
sigma = 1, sigma_u = 1, y = censored_resp, random = rep(1,29))
## Model
lm_displ_sh_model <- nimbleModel(code = lm_displ_sh,
data = data,
constants = constants,
inits = inits_sh)
#### Useful for posterior checks
## Nodes
dataNodes_displ_sh <- lm_displ_sh_model$getNodeNames(dataOnly = TRUE)
## Parent nodes
parentNodes_displ_sh <- lm_displ_sh_model$getParents(dataNodes_displ_sh, stochOnly = TRUE)
## Sim nodes
simNodes_displ_sh <- lm_displ_sh_model$getDependencies(parentNodes_displ_sh, self = FALSE)
#### RUN MCMC
c_lm_displ_sh_model <- compileNimble(lm_displ_sh_model) ## Compile
mcmc_lm_displ_sh_model <- buildMCMC(lm_displ_sh_model, monitors = parentNodes_displ_sh) ## Build MCMC
cmcmc_lm_displ_sh_model <- compileNimble(mcmc_lm_displ_sh_model, project = lm_displ_sh_model) ## Compile MCMC
output_lm_displ_sh_model <- runMCMC(cmcmc_lm_displ_sh_model, niter = n_iter, ## Run MCMC
nchains = n_chains,
nburnin = n_burnin,
thin = n_thin)
#### DIAGNOSTICS
## Chain diagnostics
WAICs_lm_displ_sh_model <- calculateWAIC(cmcmc_lm_displ_sh_model)
Rhats_lm_displ_sh_model <- MCMCsummary(output_lm_displ_sh_model, round = 2)
#MCMCtrace(output_lm_displ_sh_model,
#          pdf = FALSE,
#          ind = TRUE,
#          Rhat = TRUE,
#          n.eff = TRUE)
################################################################################
###########################          PPC          ##############################
################################################################################
################################################################################
## Area
## Simulate/predict posterior samples
nSamp_lm_area_sh_model <- nrow(output_lm_area_sh_model$chain1)
n <- length(df$Resp) ## Only needed here
ppSamples_lm_area_sh_model <- matrix(0,nSamp_lm_area_sh_model,n)
for (i in 1:nSamp_lm_area_sh_model){
c_lm_area_sh_model$beta0 <- output_lm_area_sh_model$chain1[i,"beta0"]
c_lm_area_sh_model$beta1 <- output_lm_area_sh_model$chain1[i,"beta1"]
c_lm_area_sh_model$beta2 <- output_lm_area_sh_model$chain1[i,"beta2"]
c_lm_area_sh_model$beta3 <- output_lm_area_sh_model$chain1[i,"beta3"]
c_lm_area_sh_model$beta4 <- output_lm_area_sh_model$chain1[i,"beta4"]
c_lm_area_sh_model$beta5 <- output_lm_area_sh_model$chain1[i,"beta5"]
c_lm_area_sh_model$beta6 <- output_lm_area_sh_model$chain1[i,"beta6"]
c_lm_area_sh_model$sigma <- output_lm_area_sh_model$chain1[i,"sigma"]
c_lm_area_sh_model$random <- c(output_lm_area_sh_model$chain1[i,c(8:(ncol(output_lm_area_sh_model$chain1)-1))])
c_lm_area_sh_model$simulate(simNodes_area_sh, includeData = TRUE)
ppSamples_lm_area_sh_model[i,] <- c_lm_area_sh_model[["y"]]
}
## Compute diagnostics
# Observed
obsMean_area <- mean(Data$Area_under_curve) ## This will be the same for all
obsMedian_area <- median(Data$Area_under_curve) ## This will be the same for all
# Predicted
pp_lm_area_sh_modelMean <- apply(ppSamples_lm_area_sh_model,1,mean)
pp_lm_area_sh_modelMeanCI <- HPDinterval(as.mcmc(pp_lm_area_sh_modelMean), 0.95)
pp_lm_area_sh_modelMedian <- apply(ppSamples_lm_area_sh_model,1,median)
pp_lm_area_sh_modelMedianCI <- HPDinterval(as.mcmc(pp_lm_area_sh_modelMedian), 0.95)
################################################################################
## Max force
## Simulate/predict posterior samples
nSamp_lm_m_force_sh_model <- nrow(output_lm_m_force_sh_model$chain1)
n <- length(df$Resp) ## Only needed here
ppSamples_lm_m_force_sh_model <- matrix(0,nSamp_lm_m_force_sh_model,n)
for (i in 1:nSamp_lm_m_force_sh_model){
c_lm_m_force_sh_model$beta0 <- output_lm_m_force_sh_model$chain1[i,"beta0"]
c_lm_m_force_sh_model$beta1 <- output_lm_m_force_sh_model$chain1[i,"beta1"]
c_lm_m_force_sh_model$beta2 <- output_lm_m_force_sh_model$chain1[i,"beta2"]
c_lm_m_force_sh_model$beta3 <- output_lm_m_force_sh_model$chain1[i,"beta3"]
c_lm_m_force_sh_model$beta4 <- output_lm_m_force_sh_model$chain1[i,"beta4"]
c_lm_m_force_sh_model$beta5 <- output_lm_m_force_sh_model$chain1[i,"beta5"]
c_lm_m_force_sh_model$beta6 <- output_lm_m_force_sh_model$chain1[i,"beta6"]
c_lm_m_force_sh_model$sigma <- output_lm_m_force_sh_model$chain1[i,"sigma"]
c_lm_m_force_sh_model$random <- c(output_lm_m_force_sh_model$chain1[i,c(8:(ncol(output_lm_m_force_sh_model$chain1)-1))])
c_lm_m_force_sh_model$simulate(simNodes_m_force_sh, includeData = TRUE)
ppSamples_lm_m_force_sh_model[i,] <- c_lm_m_force_sh_model[["y"]]
}
## Compute diagnostics
# Observed
obsMean_m_force <- mean(Data$Max_force) ## This will be the same for all
obsMedian_m_force <- median(Data$Max_force) ## This will be the same for all
# Predicted
pp_lm_m_force_sh_modelMean <- apply(ppSamples_lm_m_force_sh_model,1,mean)
pp_lm_m_force_sh_modelMeanCI <- HPDinterval(as.mcmc(pp_lm_m_force_sh_modelMean), 0.95)
pp_lm_m_force_sh_modelMedian <- apply(ppSamples_lm_m_force_sh_model,1,median)
pp_lm_m_force_sh_modelMedianCI <- HPDinterval(as.mcmc(pp_lm_m_force_sh_modelMedian), 0.95)
################################################################################
## Displacement
## Simulate/predict posterior samples
nSamp_lm_displ_sh_model <- nrow(output_lm_displ_sh_model$chain1)
n <- length(censored) ## Only needed here
ppSamples_lm_displ_sh_model <- matrix(0,nSamp_lm_displ_sh_model,n)
for (i in 1:nSamp_lm_displ_sh_model){
c_lm_displ_sh_model$beta0 <- output_lm_displ_sh_model$chain1[i,"beta0"]
c_lm_displ_sh_model$beta1 <- output_lm_displ_sh_model$chain1[i,"beta1"]
c_lm_displ_sh_model$beta2 <- output_lm_displ_sh_model$chain1[i,"beta2"]
c_lm_displ_sh_model$beta3 <- output_lm_displ_sh_model$chain1[i,"beta3"]
c_lm_displ_sh_model$beta4 <- output_lm_displ_sh_model$chain1[i,"beta4"]
c_lm_displ_sh_model$beta5 <- output_lm_displ_sh_model$chain1[i,"beta5"]
c_lm_displ_sh_model$beta6 <- output_lm_displ_sh_model$chain1[i,"beta6"]
c_lm_displ_sh_model$sigma <- output_lm_displ_sh_model$chain1[i,"sigma"]
c_lm_displ_sh_model$random <- c(output_lm_displ_sh_model$chain1[i,c(8:(ncol(output_lm_displ_sh_model$chain1)-1))])
c_lm_displ_sh_model$simulate(simNodes_displ_sh, includeData = TRUE)
ppSamples_lm_displ_sh_model[i,] <- c_lm_displ_sh_model[["y"]]
}
## Compute diagnostics
# Observed
obsMean_displ <- mean(Data$Displacement_at_max_force) ## This will be the same for all
obsMedian_displ <- median(Data$Displacement_at_max_force) ## This will be the same for all
# Predicted
pp_lm_displ_sh_modelMean <- apply(ppSamples_lm_displ_sh_model,1,mean)
pp_lm_displ_sh_modelMeanCI <- HPDinterval(as.mcmc(pp_lm_displ_sh_modelMean), 0.95)
pp_lm_displ_sh_modelMedian <- apply(ppSamples_lm_displ_sh_model,1,median)
pp_lm_displ_sh_modelMedianCI <- HPDinterval(as.mcmc(pp_lm_displ_sh_modelMedian), 0.95)
################################################################################
###########################        FIGURES        ##############################
################################################################################
################################################################################
############### Posterior Predictive check
############# Prepare values
############## AREA
png("./Figures/Figure_ppck.png", width = 1900, height = 1400, res = 200)
## Extract density for Mean
d_area_mean <- density(pp_lm_area_sh_modelMean, bw = 0.01)
## Build polygon for Credible Interval
MeanCIx <- d_area_mean$x[which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[1])):
which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[2]))]
MeanCIx <- c(MeanCIx,rev(MeanCIx))
MeanCIy <- d_area_mean$y[which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[1])):
which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[2]))]
MeanCIy <- c(rep(0,length(MeanCIy)),rev(MeanCIy))
################ PLOT
par(mfrow = c(2,3))
## Plot for mean
plot(d_area_mean, main = "Area", xlab = "mean",
ylab = "", col = "white")
polygon(d_area_mean, border = NA)
polygon(x = MeanCIx, y = MeanCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_area_sh_modelMeanCI[1],
x1 = pp_lm_area_sh_modelMeanCI[1],
y0 = 0,
y1 = d_area_mean$y[which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_area_sh_modelMeanCI[2],
x1 = pp_lm_area_sh_modelMeanCI[2],
y0 = 0,
y1 = d_area_mean$y[which.min(abs(d_area_mean$x - pp_lm_area_sh_modelMeanCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMean_area, col = "red", lwd = 1)
abline(v=mean(pp_lm_area_sh_modelMean), col = "blue", lwd = 1)
lines(d_area_mean, col = "black")
### Maximum FORCE
## Extract density for Mean
d_m_force_mean <- density(pp_lm_m_force_sh_modelMean, bw = 0.02)
## Build polygon for Credible Interval
MeanCIx <- d_m_force_mean$x[which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[1])):
which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[2]))]
MeanCIx <- c(MeanCIx,rev(MeanCIx))
MeanCIy <- d_m_force_mean$y[which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[1])):
which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[2]))]
MeanCIy <- c(rep(0,length(MeanCIy)),rev(MeanCIy))
## Plot for mean
plot(d_m_force_mean, main = "Maximum Force", xlab = "mean",
ylab = "", col = "white")
polygon(d_m_force_mean, border = NA)
polygon(x = MeanCIx, y = MeanCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_m_force_sh_modelMeanCI[1],
x1 = pp_lm_m_force_sh_modelMeanCI[1],
y0 = 0,
y1 = d_m_force_mean$y[which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_m_force_sh_modelMeanCI[2],
x1 = pp_lm_m_force_sh_modelMeanCI[2],
y0 = 0,
y1 = d_m_force_mean$y[which.min(abs(d_m_force_mean$x - pp_lm_m_force_sh_modelMeanCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMean_m_force, col = "red", lwd = 1)
abline(v=mean(pp_lm_m_force_sh_modelMean), col = "blue", lwd = 1)
lines(d_m_force_mean, col = "black")
### DISPLACEMENT
## Extract density for Mean
d_displ_mean <- density(pp_lm_displ_sh_modelMean, bw = 0.4)
## Build polygon for Credible Interval
MeanCIx <- d_displ_mean$x[which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[1])):
which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[2]))]
MeanCIx <- c(MeanCIx,rev(MeanCIx))
MeanCIy <- d_displ_mean$y[which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[1])):
which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[2]))]
MeanCIy <- c(rep(0,length(MeanCIy)),rev(MeanCIy))
## Plot for mean
plot(d_displ_mean, main = "Displacement", xlab = "mean",
ylab = "", col = "white")
polygon(d_displ_mean, border = NA)
polygon(x = MeanCIx, y = MeanCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_displ_sh_modelMeanCI[1],
x1 = pp_lm_displ_sh_modelMeanCI[1],
y0 = 0,
y1 = d_displ_mean$y[which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_displ_sh_modelMeanCI[2],
x1 = pp_lm_displ_sh_modelMeanCI[2],
y0 = 0,
y1 = d_displ_mean$y[which.min(abs(d_displ_mean$x - pp_lm_displ_sh_modelMeanCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMean_displ, col = "red", lwd = 1)
abline(v=mean(pp_lm_displ_sh_modelMean), col = "blue", lwd = 1)
lines(d_displ_mean, main = "Displacement", xlab = "mean",
col = "black")
###### AREA
## Extract density for Median
d_area_median <- density(pp_lm_area_sh_modelMedian, bw = 0.01)
## Build polygon for Credible Interval
MedianCIx <- d_area_median$x[which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[1])):
which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[2]))]
MedianCIx <- c(MedianCIx,rev(MedianCIx))
MedianCIy <- d_area_median$y[which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[1])):
which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[2]))]
MedianCIy <- c(rep(0,length(MedianCIy)),rev(MedianCIy))
## Plot for median
plot(d_area_median, main = "", xlab = "median",
ylab = "", col = "white")
polygon(d_area_median, border = NA)
polygon(x = MedianCIx, y = MedianCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_area_sh_modelMedianCI[1],
x1 = pp_lm_area_sh_modelMedianCI[1],
y0 = 0,
y1 = d_area_median$y[which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_area_sh_modelMedianCI[2],
x1 = pp_lm_area_sh_modelMedianCI[2],
y0 = 0,
y1 = d_area_median$y[which.min(abs(d_area_median$x - pp_lm_area_sh_modelMedianCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMedian_area, col = "red", lwd = 1)
abline(v=median(pp_lm_area_sh_modelMedian), col = "blue", lwd = 1)
lines(d_area_median, col = "black")
############## MAXIMUM FORCE
## Extract density for Median
d_m_force_median <- density(pp_lm_m_force_sh_modelMedian, bw = 0.03)
## Build polygon for Credible Interval
MedianCIx <- d_m_force_median$x[which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[1])):
which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[2]))]
MedianCIx <- c(MedianCIx,rev(MedianCIx))
MedianCIy <- d_m_force_median$y[which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[1])):
which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[2]))]
MedianCIy <- c(rep(0,length(MedianCIy)),rev(MedianCIy))
## Plot for median
plot(d_m_force_median, main = "", xlab = "median",
ylab = "", col = "white")
polygon(d_m_force_median, border = NA)
polygon(x = MedianCIx, y = MedianCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_m_force_sh_modelMedianCI[1],
x1 = pp_lm_m_force_sh_modelMedianCI[1],
y0 = 0,
y1 = d_m_force_median$y[which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_m_force_sh_modelMedianCI[2],
x1 = pp_lm_m_force_sh_modelMedianCI[2],
y0 = 0,
y1 = d_m_force_median$y[which.min(abs(d_m_force_median$x - pp_lm_m_force_sh_modelMedianCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMedian_m_force, col = "red", lwd = 1)
abline(v=median(pp_lm_m_force_sh_modelMedian), col = "blue", lwd = 1)
lines(d_m_force_median, col = "black")
############## DISPLACEMENT
## Extract density for Median
d_displ_median <- density(pp_lm_displ_sh_modelMedian, bw = 0.4)
## Build polygon for Credible Interval
MedianCIx <- d_displ_median$x[which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[1])):
which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[2]))]
MedianCIx <- c(MedianCIx,rev(MedianCIx))
MedianCIy <- d_displ_median$y[which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[1])):
which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[2]))]
MedianCIy <- c(rep(0,length(MedianCIy)),rev(MedianCIy))
## Plot for median
plot(d_displ_median, main = "", xlab = "median",
ylab = "", col = "white")
polygon(d_displ_median, border = NA)
polygon(x = MedianCIx, y = MedianCIy, col = "lightblue", border = NA)
segments(x0 = pp_lm_displ_sh_modelMedianCI[1],
x1 = pp_lm_displ_sh_modelMedianCI[1],
y0 = 0,
y1 = d_displ_median$y[which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[1]))],
lty = 2, lwd = 0.8, col = "black")
segments(x0 = pp_lm_displ_sh_modelMedianCI[2],
x1 = pp_lm_displ_sh_modelMedianCI[2],
y0 = 0,
y1 = d_displ_median$y[which.min(abs(d_displ_median$x - pp_lm_displ_sh_modelMedianCI[2]))],
lty = 2, lwd = 0.8, col = "black")
abline(v=obsMedian_displ, col = "red", lwd = 1)
abline(v=median(pp_lm_displ_sh_modelMedian), col = "blue", lwd = 1)
lines(d_displ_median, main = "Displacement", xlab = "median",
col = "black")
dev.off()
#dev.copy(tiff, file ="./Figures/Posterior_predictive_checks.tiff", width = 4*3,
#         height = 2*3, units = "in", res = 100*3)
#dev.off()
################################################################################
###########################      PARAMETERS       ##############################
################################################################################
#tiff(file ="./Figures/Parameters.tiff", width = 1500*1.5,
#         height = 800*1.5, res = 100*1.5)
png("./Figures/Figure_pars.png", width = 2800, height = 1600, res = 200)
par(mfrow = c(1,3))
alpha <- 0.2
l_vars <- length(output_lm_area_sh_model$chain1[,"beta1"])
pars_area <- data.frame("Variables" = c(rep("Inclination",l_vars),
rep("Distance", l_vars),
rep("Morph1", l_vars),
rep("Morph2", l_vars),
rep("Max width", l_vars),
rep("Shaft", l_vars)),
"Values" = c(output_lm_area_sh_model$chain1[,"beta1"],
output_lm_area_sh_model$chain1[,"beta2"],
output_lm_area_sh_model$chain1[,"beta3"],
output_lm_area_sh_model$chain1[,"beta4"],
output_lm_area_sh_model$chain1[,"beta5"],
output_lm_area_sh_model$chain1[,"beta6"]))
boxplot(Values ~ Variables, data = pars_area, main = "Area")
grid()
boxplot(Values ~ Variables, data = pars_area, add = TRUE, col = "brown2")
points(x = rnorm(l_vars,1,0.1),y = pars_area[which(pars_area$Variables == "Distance"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
points(x = rnorm(l_vars,2,0.1),y = pars_area[which(pars_area$Variables == "Inclination"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
points(x = rnorm(l_vars,3,0.1),y = pars_area[which(pars_area$Variables == "Max width"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
points(x = rnorm(l_vars,4,0.1),y = pars_area[which(pars_area$Variables == "Morph1"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
points(x = rnorm(l_vars,5,0.1),y = pars_area[which(pars_area$Variables == "Morph2"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
points(x = rnorm(l_vars,6,0.1),y = pars_area[which(pars_area$Variables == "Shaft"),2],
pch = 16, cex = 0.6, col = adjustcolor("brown4", alpha.f = alpha))
abline(h = 0, col = "red")
pars_m_force <- data.frame("Variables" = c(rep("Inclination",l_vars),
rep("Distance", l_vars),
rep("Morph1", l_vars),
rep("Morph2", l_vars),
rep("Max width", l_vars),
rep("Shaft", l_vars)),
"Values" = c(output_lm_m_force_sh_model$chain1[,"beta1"],
output_lm_m_force_sh_model$chain1[,"beta2"],
output_lm_m_force_sh_model$chain1[,"beta3"],
output_lm_m_force_sh_model$chain1[,"beta4"],
output_lm_m_force_sh_model$chain1[,"beta5"],
output_lm_m_force_sh_model$chain1[,"beta6"]))
boxplot(Values ~ Variables, data = pars_m_force, main = "Maximum Force")
grid()
boxplot(Values ~ Variables, data = pars_m_force, col = "slateblue2", add = TRUE)
points(x = rnorm(l_vars,1,0.1),y = pars_m_force[which(pars_m_force$Variables == "Distance"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
points(x = rnorm(l_vars,2,0.1),y = pars_m_force[which(pars_m_force$Variables == "Inclination"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
points(x = rnorm(l_vars,3,0.1),y = pars_m_force[which(pars_m_force$Variables == "Max width"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
points(x = rnorm(l_vars,4,0.1),y = pars_m_force[which(pars_m_force$Variables == "Morph1"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
points(x = rnorm(l_vars,5,0.1),y = pars_m_force[which(pars_m_force$Variables == "Morph2"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
points(x = rnorm(l_vars,6,0.1),y = pars_m_force[which(pars_m_force$Variables == "Shaft"),2],
pch = 16, cex = 0.6, col = adjustcolor("slateblue4", alpha.f = alpha))
abline(h = 0, col = "red")
pars_displ <- data.frame("Variables" = c(rep("Inclination",l_vars),
rep("Distance", l_vars),
rep("Morph1", l_vars),
rep("Morph2", l_vars),
rep("Max width", l_vars),
rep("Shaft", l_vars)),
"Values" = c(output_lm_displ_sh_model$chain1[,"beta1"],
output_lm_displ_sh_model$chain1[,"beta2"],
output_lm_displ_sh_model$chain1[,"beta3"],
output_lm_displ_sh_model$chain1[,"beta4"],
output_lm_displ_sh_model$chain1[,"beta5"],
output_lm_displ_sh_model$chain1[,"beta6"]))
boxplot(Values ~ Variables, data = pars_displ, main = "Displacement")
grid()
boxplot(Values ~ Variables, data = pars_displ, col = "yellow2", add = TRUE)
points(x = rnorm(l_vars,1,0.1),y = pars_displ[which(pars_displ$Variables == "Distance"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
points(x = rnorm(l_vars,2,0.1),y = pars_displ[which(pars_displ$Variables == "Inclination"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
points(x = rnorm(l_vars,3,0.1),y = pars_displ[which(pars_displ$Variables == "Max width"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
points(x = rnorm(l_vars,4,0.1),y = pars_displ[which(pars_displ$Variables == "Morph1"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
points(x = rnorm(l_vars,5,0.1),y = pars_displ[which(pars_displ$Variables == "Morph2"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
points(x = rnorm(l_vars,6,0.1),y = pars_displ[which(pars_displ$Variables == "Shaft"),2],
pch = 16, cex = 0.6, col = adjustcolor("yellow4", alpha.f = alpha))
abline(h = 0, col = "red")
dev.off()
d_area_mean
obsMean_area
mean(pp_lm_area_sh_modelMean)
obsMean_m_force
mean(pp_lm_m_force_sh_modelMean)
obsMean_displ
mean(pp_lm_displ_sh_modelMean)
obsMedian_area
median(pp_lm_area_sh_modelMedian)
obsMedian_m_force
median(pp_lm_m_force_sh_modelMedian)
obsMedian_displ
median(pp_lm_displ_sh_modelMedian)
Data$Inclination
output_lm_area_sh_model$chain1
mean(output_lm_area_sh_model$chain1[,2])
mean(output_lm_area_sh_model$chain1[,3])
mean(output_lm_area_sh_model$chain1[,4])
mean(output_lm_area_sh_model$chain1[,5])
mean(output_lm_area_sh_model$chain1[,6])
mean(output_lm_area_sh_model$chain1[,7])
library(coda)
HPDinterval(output_lm_area_sh_model$chain1[,2])
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,2]))
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,2])) # I
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,3])) # T
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,4])) # M1
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,5])) # M2
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,6])) # W
HPDinterval(as.mcmc(output_lm_area_sh_model$chain1[,7])) # S
## Maximum force
mean(output_lm_m_force_sh_model$chain1[,2]) # Inc
mean(output_lm_m_force_sh_model$chain1[,3]) # Dist
mean(output_lm_m_force_sh_model$chain1[,4]) # M1
mean(output_lm_m_force_sh_model$chain1[,5]) # M2
mean(output_lm_m_force_sh_model$chain1[,6]) # W
mean(output_lm_m_force_sh_model$chain1[,7]) # S
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,2])) # I
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,3])) # T
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,4])) # M1
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,5])) # M2
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,6])) # W
HPDinterval(as.mcmc(output_lm_m_force_sh_model$chain1[,7])) # S
mean(output_lm_displ_sh_model$chain1[,2]) # Inc
mean(output_lm_displ_sh_model$chain1[,3]) # Dist
mean(output_lm_displ_sh_model$chain1[,4]) # M1
mean(output_lm_displ_sh_model$chain1[,5]) # M2
mean(output_lm_displ_sh_model$chain1[,6]) # W
mean(output_lm_displ_sh_model$chain1[,7]) # S
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,2])) # I
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,3])) # T
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,4])) # M1
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,5])) # M2
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,6])) # W
HPDinterval(as.mcmc(output_lm_displ_sh_model$chain1[,7])) # S
## Data
Data <- read.csv("./Data/Sel_data.csv", stringsAsFactors = T)[,-1] ## Set your own path
## Simplify inclination column (too many covariates)
levels(Data$Inclination) <- c(levels(Data$Inclination), "Perpendicular", "Oblique")
Data$Inclination[Data$Inclination != "Horizontal"] <- "Oblique"
Data$Inclination[Data$Inclination == "Horizontal"] <- "Perpendicular"
Data$Inclination <- droplevels(Data$Inclination)
## Build data frame
df <- data.frame("Resp" = Data$Area_under_curve,
"Inclination" = as.numeric(Data$Inclination),
"Par_w_sh" = Data$Parallel_width_shaft,
"Per_w_sh" = Data$Perpendicular_width_shaft,
"W_df_sh" = Data$Width_before_shaft,
"Max_w" = Data$Max_width,
"Distance" = Data$Distance_tip_to_shaft,
"Morph1" = Data$PC1,
"Morph2" = Data$PC2,
"Throw" = as.numeric(as.factor(c(rep(1:29,3)))))
df$Resp
